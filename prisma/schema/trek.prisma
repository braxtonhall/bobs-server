model Series {
  id       String    @id
  // memoryAlphaUrl String // TODO
  name     String
  episodes Episode[]
}

model Episode {
  id String @id @default(cuid())

  // memoryAlphaUrl String // TODO
  name         String
  abbreviation String?
  runtime      Int
  release      DateTime
  starDate     Float?
  season       Int
  production   Int
  description  String

  seriesId   String
  series     Series      @relation(fields: [seriesId], references: [id])
  views      View[]
  opinions   Opinion[]
  watchlists Watchlist[]
  watchers   Viewer[]

  // The different ways to sort the episodes.
  // Each is a unique int in that col.
  // Not adding @unique tho becuase i want to easily update these
  sort Int

  @@unique([seriesId, season, production])
}

model Watchlist {
  id          String    @id @default(cuid())
  ownerId     String
  owner       Viewer    @relation("Ownership", fields: [ownerId], references: [id])
  watchers    Viewer[]  @relation("Watching")
  name        String
  description String
  /// JSON formatted string for the filters used to create this watchlist
  filters     String
  episodes    Episode[]
  createdAt   DateTime  @default(now())
}

model Viewer {
  id         String      @id @default(cuid())
  email      Email       @relation("ViewerEmail", fields: [emailId], references: [id], onDelete: Cascade)
  emailId    String      @unique
  name       String
  views      View[]
  opinions   Opinion[]
  watchingId String?
  watching   Watchlist?  @relation("Watching", fields: [watchingId], references: [id], onDelete: SetNull)
  currentId  String?
  current    Episode?    @relation(fields: [currentId], references: [id], onDelete: SetNull)
  watchlists Watchlist[] @relation("Ownership")
  /// JSON formatted string for the user's settings
  settings   String
}

model Opinion {
  viewerId  String
  viewer    Viewer  @relation(fields: [viewerId], references: [id])
  episodeId String
  episode   Episode @relation(fields: [episodeId], references: [id])

  liked  Boolean
  rating Int?

  @@id([viewerId, episodeId])
}

model View {
  id Int @id @default(autoincrement())

  viewerId String
  viewer   Viewer @relation(fields: [viewerId], references: [id])

  episodeId String
  episode   Episode @relation(fields: [episodeId], references: [id])

  liked     Boolean
  rating    Int?
  comment   String?
  spoiler   Boolean
  viewedOn  DateTime?
  createdAt DateTime  @default(now())
  tags      Tag[]
}

model Tag {
  name  String @id
  views View[]
}
