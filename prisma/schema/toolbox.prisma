model Message {
  id         Int       @id @default(autoincrement())
  address    String
  subject    String
  html       String
  persona    String
  expiration DateTime?
}

model Box {
  sort          Int            @id @default(autoincrement())
  id            String         @unique @default(cuid())
  name          String
  origin        String?
  owner         Email?         @relation(fields: [ownerId], references: [id])
  ownerId       String?
  posts         Post[]
  deleted       Boolean        @default(false)
  stylesheet    String?
  season        Season?
  entry         Entry?
  permissions   Permission[]
  subscriptions Subscription[]
}

model Permission {
  boxId             String
  box               Box     @relation(fields: [boxId], references: [id])
  emailId           String
  email             Email   @relation(fields: [emailId], references: [id])
  canSetDetails     Boolean @default(false)
  canKill           Boolean @default(false)
  canDelete         Boolean @default(false)
  canSetPermissions Boolean @default(false)

  @@id(name: "id", [boxId, emailId])
}

model Subscription {
  boxId     String
  box       Box      @relation(fields: [boxId], references: [id])
  emailId   String
  email     Email    @relation(fields: [emailId], references: [id])
  updatedAt DateTime @default(now())

  @@id(name: "id", [boxId, emailId])
}

model Counter {
  sort       Int            @id @default(autoincrement())
  id         String         @unique @default(cuid())
  deleted    Boolean        @default(false)
  name       String
  origin     String?
  owner      Email          @relation(fields: [ownerId], references: [id])
  ownerId    String
  increments Int            @default(0)
  value      Int            @default(0)
  unique     Boolean
  views      CounterView[]
  images     CounterImage[]

  incrementAmount Int     @default(1)
  allowApiInc     Boolean @default(true)
  allowApiSet     Boolean @default(false)
  allowApiGet     Boolean @default(true)
}

model CounterImage {
  sort      Int     @id @default(autoincrement())
  id        String  @unique @default(cuid())
  counterId String
  counter   Counter @relation(fields: [counterId], references: [id], onDelete: Cascade)

  /// 'NOOP' | 'INC' | 'SET'
  viewBehaviour String
  /// only applies to the SET behaviour
  amount        Int
}

model CounterView {
  counterId String
  counter   Counter @relation(fields: [counterId], references: [id], onDelete: Cascade)
  posterId  Int
  poster    Poster  @relation(fields: [posterId], references: [id])

  @@id(name: "id", [counterId, posterId])
}

model Poster {
  id    Int           @id @default(autoincrement())
  ip    String        @unique
  posts Post[]
  views CounterView[]
  karma Int           @default(0)
}

model Post {
  sort       Int      @id @default(autoincrement())
  id         String   @unique @default(cuid())
  createdAt  DateTime @default(now())
  from       String
  dead       Boolean  @default(false)
  content    String
  subscribed Boolean  @default(true)
  poster     Poster   @relation(fields: [posterId], references: [id])
  posterId   Int
  email      Email?   @relation(fields: [emailId], references: [id])
  emailId    String?
  box        Box      @relation(fields: [boxId], references: [id])
  boxId      String
  children   Post[]   @relation("PostChildren")
  parent     Post?    @relation("PostChildren", fields: [parentId], references: [id])
  parentId   String?
  notified   Boolean  @default(false)
}
